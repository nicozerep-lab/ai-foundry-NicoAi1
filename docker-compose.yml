version: '3.8'

services:
  # Node.js Backend
  backend-node:
    build:
      context: ./backend-node
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - GITHUB_WEBHOOK_SECRET=${GITHUB_WEBHOOK_SECRET}
      - AZURE_AI_FOUNDRY_ENDPOINT=${AZURE_AI_FOUNDRY_ENDPOINT}
      - AZURE_AI_STUDIO_ENDPOINT=${AZURE_AI_STUDIO_ENDPOINT}
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - AZURE_REGION=${AZURE_REGION}
      - FRONTEND_URL=http://localhost:3000
    volumes:
      - ./backend-node:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - ai-foundry-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Python Backend
  backend-python:
    build:
      context: ./backend-python
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - PORT=8000
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - AZURE_AI_FOUNDRY_ENDPOINT=${AZURE_AI_FOUNDRY_ENDPOINT}
      - AZURE_AI_STUDIO_ENDPOINT=${AZURE_AI_STUDIO_ENDPOINT}
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - AZURE_REGION=${AZURE_REGION}
      - FRONTEND_URL=http://localhost:3000
      - ALLOWED_HOSTS=localhost,127.0.0.1
    volumes:
      - ./backend-python:/usr/src/app
    networks:
      - ai-foundry-network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health', timeout=3)"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend
  frontend-react:
    build:
      context: ./frontend-react
      dockerfile: Dockerfile
      target: builder  # Use development stage
    ports:
      - "3000:3000"
    environment:
      - VITE_NODE_API_URL=http://localhost:3001
      - VITE_PYTHON_API_URL=http://localhost:8000
      - VITE_NODE_WS_URL=http://localhost:3001
      - VITE_APP_NAME=AI Foundry Dashboard
      - VITE_APP_VERSION=1.0.0
    volumes:
      - ./frontend-react:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - ai-foundry-network
    depends_on:
      - backend-node
      - backend-python
    command: npm run dev

  # Redis (for caching and session storage)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - ai-foundry-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL (for future use)
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=ai_foundry
      - POSTGRES_USER=ai_foundry
      - POSTGRES_PASSWORD=ai_foundry_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ai-foundry-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_foundry"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx (reverse proxy for production-like setup)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - ai-foundry-network
    depends_on:
      - frontend-react
      - backend-node
      - backend-python

networks:
  ai-foundry-network:
    driver: bridge

volumes:
  postgres_data: