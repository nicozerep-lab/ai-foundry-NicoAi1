name: Deploy to Azure Container Apps

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
  push:
    tags:
      - 'v*'

permissions:
  contents: read
  packages: write
  id-token: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  AZURE_RESOURCE_GROUP: rg-ai-foundry-${{ github.event.inputs.environment || 'production' }}
  AZURE_LOCATION: eastus

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [backend-node, backend-python, frontend-react]
    outputs:
      images: ${{ steps.images.outputs.images }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check if service exists
        id: check-service
        run: |
          if [ -d "${{ matrix.service }}" ] && [ -f "${{ matrix.service }}/Dockerfile" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "⚠️ Service ${{ matrix.service }} does not exist or has no Dockerfile"
          fi

      - name: Set up Docker Buildx
        if: steps.check-service.outputs.exists == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: steps.check-service.outputs.exists == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        if: steps.check-service.outputs.exists == 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=tag
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        if: steps.check-service.outputs.exists == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Output image info
        if: steps.check-service.outputs.exists == 'true'
        id: images
        run: |
          echo "images=${{ steps.meta.outputs.tags }}" >> $GITHUB_OUTPUT

  deploy-infrastructure:
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: ${{ github.event.inputs.environment || 'production' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Create Resource Group
        run: |
          az group create \
            --name ${{ env.AZURE_RESOURCE_GROUP }} \
            --location ${{ env.AZURE_LOCATION }} \
            --tags Environment=${{ github.event.inputs.environment || 'production' }} Project=ai-foundry

      - name: Create Container Apps Environment
        run: |
          az containerapp env create \
            --name ca-env-ai-foundry-${{ github.event.inputs.environment || 'production' }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --location ${{ env.AZURE_LOCATION }}

      - name: Create Azure Container Registry (if not exists)
        run: |
          az acr create \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name acraifoundry${{ github.event.inputs.environment || 'prod' }} \
            --sku Basic \
            --admin-enabled true || echo "ACR might already exist"

  deploy-backend-node:
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-infrastructure]
    environment: ${{ github.event.inputs.environment || 'production' }}
    steps:
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy Node.js Backend to Container Apps
        run: |
          IMAGE_TAG=$(echo "${{ github.sha }}" | cut -c1-8)
          
          az containerapp create \
            --name ca-backend-node \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --environment ca-env-ai-foundry-${{ github.event.inputs.environment || 'production' }} \
            --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend-node:main-${IMAGE_TAG} \
            --target-port 3001 \
            --ingress external \
            --registry-server ${{ env.REGISTRY }} \
            --registry-username ${{ github.actor }} \
            --registry-password ${{ secrets.GITHUB_TOKEN }} \
            --env-vars \
              NODE_ENV=production \
              PORT=3001 \
              GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN_PROD }}" \
              AZURE_AI_FOUNDRY_ENDPOINT="${{ secrets.AZURE_AI_FOUNDRY_ENDPOINT }}" \
              AZURE_OPENAI_API_KEY="${{ secrets.AZURE_OPENAI_API_KEY }}" \
            --cpu 0.5 \
            --memory 1.0Gi \
            --min-replicas 1 \
            --max-replicas 3 || \
          az containerapp update \
            --name ca-backend-node \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend-node:main-${IMAGE_TAG}

  deploy-backend-python:
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-infrastructure]
    environment: ${{ github.event.inputs.environment || 'production' }}
    steps:
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy Python Backend to Container Apps
        run: |
          IMAGE_TAG=$(echo "${{ github.sha }}" | cut -c1-8)
          
          az containerapp create \
            --name ca-backend-python \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --environment ca-env-ai-foundry-${{ github.event.inputs.environment || 'production' }} \
            --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend-python:main-${IMAGE_TAG} \
            --target-port 8000 \
            --ingress external \
            --registry-server ${{ env.REGISTRY }} \
            --registry-username ${{ github.actor }} \
            --registry-password ${{ secrets.GITHUB_TOKEN }} \
            --env-vars \
              ENVIRONMENT=production \
              PORT=8000 \
              GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN_PROD }}" \
              AZURE_AI_FOUNDRY_ENDPOINT="${{ secrets.AZURE_AI_FOUNDRY_ENDPOINT }}" \
              AZURE_OPENAI_API_KEY="${{ secrets.AZURE_OPENAI_API_KEY }}" \
            --cpu 0.5 \
            --memory 1.0Gi \
            --min-replicas 1 \
            --max-replicas 3 || \
          az containerapp update \
            --name ca-backend-python \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend-python:main-${IMAGE_TAG}

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-infrastructure, deploy-backend-node, deploy-backend-python]
    environment: ${{ github.event.inputs.environment || 'production' }}
    steps:
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get backend URLs
        id: backend-urls
        run: |
          NODE_URL=$(az containerapp show --name ca-backend-node --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "properties.configuration.ingress.fqdn" -o tsv)
          PYTHON_URL=$(az containerapp show --name ca-backend-python --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "properties.configuration.ingress.fqdn" -o tsv)
          
          echo "node_url=https://${NODE_URL}" >> $GITHUB_OUTPUT
          echo "python_url=https://${PYTHON_URL}" >> $GITHUB_OUTPUT

      - name: Deploy React Frontend to Container Apps
        run: |
          IMAGE_TAG=$(echo "${{ github.sha }}" | cut -c1-8)
          
          az containerapp create \
            --name ca-frontend-react \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --environment ca-env-ai-foundry-${{ github.event.inputs.environment || 'production' }} \
            --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend-react:main-${IMAGE_TAG} \
            --target-port 3000 \
            --ingress external \
            --registry-server ${{ env.REGISTRY }} \
            --registry-username ${{ github.actor }} \
            --registry-password ${{ secrets.GITHUB_TOKEN }} \
            --env-vars \
              VITE_NODE_API_URL="${{ steps.backend-urls.outputs.node_url }}" \
              VITE_PYTHON_API_URL="${{ steps.backend-urls.outputs.python_url }}" \
              VITE_NODE_WS_URL="${{ steps.backend-urls.outputs.node_url }}" \
              VITE_APP_NAME="AI Foundry Dashboard" \
              VITE_APP_VERSION="${{ github.ref_name }}" \
            --cpu 0.25 \
            --memory 0.5Gi \
            --min-replicas 1 \
            --max-replicas 5 || \
          az containerapp update \
            --name ca-frontend-react \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend-react:main-${IMAGE_TAG}

  post-deployment:
    runs-on: ubuntu-latest
    needs: [deploy-frontend]
    environment: ${{ github.event.inputs.environment || 'production' }}
    steps:
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get application URLs
        id: urls
        run: |
          FRONTEND_URL=$(az containerapp show --name ca-frontend-react --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "properties.configuration.ingress.fqdn" -o tsv)
          NODE_URL=$(az containerapp show --name ca-backend-node --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "properties.configuration.ingress.fqdn" -o tsv)
          PYTHON_URL=$(az containerapp show --name ca-backend-python --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "properties.configuration.ingress.fqdn" -o tsv)
          
          echo "## 🚀 Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Application URLs:" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend**: https://${FRONTEND_URL}" >> $GITHUB_STEP_SUMMARY
          echo "- **Node.js Backend**: https://${NODE_URL}" >> $GITHUB_STEP_SUMMARY
          echo "- **Python Backend**: https://${PYTHON_URL}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Environment: ${{ github.event.inputs.environment || 'production' }}" >> $GITHUB_STEP_SUMMARY
          echo "### Version: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY

      - name: Run health checks
        run: |
          echo "Running post-deployment health checks..."
          
          # Wait for services to be ready
          sleep 30
          
          # Check frontend health (basic)
          FRONTEND_URL=$(az containerapp show --name ca-frontend-react --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "properties.configuration.ingress.fqdn" -o tsv)
          curl -f "https://${FRONTEND_URL}/" || echo "Frontend health check failed"
          
          # Check Node.js backend health
          NODE_URL=$(az containerapp show --name ca-backend-node --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "properties.configuration.ingress.fqdn" -o tsv)
          curl -f "https://${NODE_URL}/health" || echo "Node.js backend health check failed"
          
          # Check Python backend health
          PYTHON_URL=$(az containerapp show --name ca-backend-python --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "properties.configuration.ingress.fqdn" -o tsv)
          curl -f "https://${PYTHON_URL}/health" || echo "Python backend health check failed"
          
          echo "✅ Health checks completed"